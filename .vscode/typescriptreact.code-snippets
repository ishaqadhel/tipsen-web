{
    //#region  //*=========== React ===========
    "import React": {
        "prefix": "ir",
        "body": ["import * as React from 'react';"]
    },
    "React.useState": {
        "prefix": "rus",
        "body": [
            "const [${1}, set${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}] = React.useState(${2:initial${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}})$0"
        ]
    },
    "React.useEffect": {
        "prefix": "rue",
        "body": ["React.useEffect(() => {", "  $0", "}, []);"]
    },
    "React.useReducer": {
        "prefix": "rured",
        "body": [
            "const [state, dispatch] = React.useReducer(${0:someReducer}, {",
            "  ",
            "})"
        ]
    },
    "React.useContext": {
        "prefix": "ruc",
        "body": ["const ${1:${ctx}} = React.useContext();"]
    },
    "React.useRef": {
        "prefix": "ruref",
        "body": ["const ${1:someRef} = React.useRef($0)"]
    },
    "React Functional Component TypeScript": {
        "prefix": "rfc",
        "body": [
            "import * as React from 'react';\n",
            "const ${1:${TM_FILENAME_BASE}}: React.FC = () => {",
            "  return (",
            "    <div>",
            "      $0",
            "    </div>",
            "  )",
            "}\n",
            "export default ${1:${TM_FILENAME_BASE}};"
        ]
    },
    "React Functional Component TypeScript With Props": {
        "prefix": "rfcwp",
        "body": [
            "import * as React from 'react';\n",
            "type Props = {",
            "    dummy: string;",
            "};\n",
            "const ${1:${TM_FILENAME_BASE}}: React.FC<Props> = ({ dummy }) => {",
            "  return (",
            "    <div>",
            "      {dummy}",
            "    </div>",
            "  )",
            "}\n",
            "export default ${1:${TM_FILENAME_BASE}};"
        ]
    },
    "React Functional Component": {
        "prefix": "rc",
        "body": [
            "import * as React from 'react';\n",
            "export default function ${1:${TM_FILENAME_BASE}}() {",
            "  return (",
            "    <div>",
            "      $0",
            "    </div>",
            "  )",
            "}"
        ]
    },
    "React Functional Component with Props": {
        "prefix": "rcp",
        "body": [
            "import * as React from 'react';\n",
            "import clsxm from '@/lib/clsxm';\n",
            "type ${1:${TM_FILENAME_BASE}}Props= {\n",
            "} & React.ComponentPropsWithoutRef<'div'>\n",
            "export default function ${1:${TM_FILENAME_BASE}}({className, ...rest}: ${1:${TM_FILENAME_BASE}}Props) {",
            "  return (",
            "    <div className={clsxm('', className)} {...rest}>",
            "      $0",
            "    </div>",
            "  )",
            "}"
        ]
    },
    //#endregion  //*======== React ===========

    //#region  //*=========== Commons ===========
    "Region": {
        "prefix": "reg",
        "scope": "javascript, typescript, javascriptreact, typescriptreact",
        "body": [
            "//#region  //*=========== ${1} ===========",
            "${TM_SELECTED_TEXT}$0",
            "//#endregion  //*======== ${1} ==========="
        ]
    },
    "Object Mapping": {
        "prefix": "om",
        "body": ["{${1:${Objects}}.map((data) => (\n", "))}"]
    },
    "Region CSS": {
        "prefix": "regc",
        "scope": "css, scss",
        "body": [
            "/* #region  /**=========== ${1} =========== */",
            "${TM_SELECTED_TEXT}$0",
            "/* #endregion  /**======== ${1} =========== */"
        ]
    },
    //#endregion  //*======== Commons ===========

    //#region  //*=========== Snippet Wrap ===========
    "Wrap with Fragment": {
        "prefix": "ff",
        "body": ["<>", "\t${TM_SELECTED_TEXT}", "</>"]
    },
    "Wrap with clsx": {
        "prefix": "cx",
        "body": ["{clsx(${TM_SELECTED_TEXT}$0)}"]
    },
    "Wrap with clsxm": {
        "prefix": "cxm",
        "body": ["{clsxm(${TM_SELECTED_TEXT}$0, className)}"]
    }
    //#endregion  //*======== Snippet Wrap ===========
}
